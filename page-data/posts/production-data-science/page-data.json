{
    "componentChunkName": "component---src-templates-post-page-js",
    "path": "/posts/production-data-science/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Filippo Bovo","siteUrl":"https://FilippoBovo.github.io","author":{"name":"Filippo Bovo"},"social":{"twitterCreator":"@bovo_filippo","fbAppID":""}}},"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Production Data Science\",\n  \"date\": \"2018-07-18T00:00:00.000Z\",\n  \"cover\": \"./explore-refactor-loop.png\",\n  \"coverAlt\": \"Explore-refactor loop\",\n  \"description\": \"A workflow for collaborative data science aimed at production.\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"Last year, in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.satalia.com\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Satalia\"), \", I was working on a collaborative data science project. The project was going well, but my collaborators and I overlooked good practices and, when exploring and modelling data, we did not keep in mind that we were ultimately building a product. These oversights surfaced towards the end of the work when we automated our best model for production.\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"After we completed the project, I looked for existing ways to carry out collaborative data science with an end-product in mind. I could only find a few resources on the topic and what I found focused only on specific areas, such as testing for data science. Moreover, when talking to data science students, I learned that they, as well, were not taught good coding practices or effective methodologies to collaborate with other people.\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"I started by looking at software development practices that could be easily applied to data science.The straightforward choice was using a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3/tutorial/venv.html\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Python virtual environment\"), \" to ensure the reproducibility of the work, and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://git-scm.com\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Git\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://packaging.python.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Python packaging utilities\"), \" to ease the process of installing and contributing to the software. Even though I knew these practices and tools, by following online data science tutorials I got into the habit of just sharing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jupyter.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Jupyter notebooks\"), \". Jupyter notebooks are good for self-contained exploratory analyses, but notebooks alone are not effective to create a product. However, I did not want to ditch notebooks, as they are a great tool, offering an interactive and non-linear playground, suitable for exploratory analysis. At that point, I had exploratory analysis on one hand and productionisation on the other, and I wanted to combine them in a simple workflow.\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"A common workflow in agile software development alternates the development of new features and their refactoring. This cycle allows the inclusion of new features fulfilling current users' needs while keeping the codebase lean and stable. In data science, developing new features for users is replaced with finding insights through data exploration. This observation led to the central theme of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FilippoBovo/production-data-science\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Production Data Science\"), \" workflow: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"the explore-refactor cycle\"), \".\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"The explore-refactor cycle, depicted in the figure above, alternates exploration and refactoring. Exploration increases the complexity of a project by adding new insights through analyses. Refactoring decreases the complexity by tidying part of the analyses into the production codebase. In other words, the production codebase is a distilled version of the code used to obtain insights. Most importantly, insights are derived partly through code and mainly through deductive reasoning. Data scientists use code like Sherlock Holmes uses chemistry to gain evidence for his line of reasoning.\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jupyter.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Jupyter notebooks\"), \" allow us to narrate our deductions using formatted text and write supporting code in the same document. However, often textual explanations are given little weight and are shadowed by long chunks of code. So, in data science, refactoring should involve both code and the text-based reasoning. Refactoring code from a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jupyter.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Jupyter notebook\"), \" into a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://packaging.python.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Python package\"), \" turns deductive reasoning into the protagonist of a notebook. A notebook becomes a canvas to prove a point about the data by using text, supported by code. This resembles literate programming, where text is used to explain and justify code itself. In this view, where all details are stripped away, a notebook is the combination of text and code.\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"In a similar light, in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.edwardtufte.com/tufte/books_vdqi\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"The Visual Display of Quantitative Information\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Edward_Tufte\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Tufte\"), \" defines information graphics as the combination of data-ink and non-data-ink. Data-ink is the amount of ink representing data and non-data-ink represents the rest. Because it is the data-ink that carries information, data-ink should be the protagonist of information graphics. When non-data-ink steals the scene, information dilutes in uninformative content. Tufte suggests to improve information graphics by reasonably maximising data-ink and minimising non-data-ink. Similarly, when viewing a notebook as a means for reasoning, text should be the protagonist; text should not be shadowed by code. This leads to a simple rule for refactoring notebooks: text over code.\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"I came across a similar idea in software development: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/kcpeppe/status/15473004648\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"functionality is an asset, code is a liability\"), \". Paraphrasing this statement, functionality is what software should offer while keeping a small codebase, because the larger the codebase, the higher the maintenance costs and the chances of having bugs. The common denominator of data-ink over non-data-ink, text over code, and functionality over code, is to work with other people in mind, that is, to care about the experience that people have when going through our work.\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"Similarly, the creator of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.python.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Python\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Guido_van_Rossum\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Guido van Rossum\"), \", noted that \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.python.org/dev/peps/pep-0008/\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"code is read much more often than it is written\"), \". Indeed, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.python.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Python\"), \"'s design emphasises readability. Ignoring readability, we can save an hour by not cleaning up our code, while each collaborator may lose two hours trying to understand it. If we collaborate with three people, one hour is saved and six hours may be wasted in frustration. So, if everyone does that, everyone loses. Instead, if everyone works with other people in mind, everyone wins. Moreover, when talking about other people, I do not only refer to our collaborators, but also to our future-self. The reason is that in a few months we are likely to forget the details of what we are doing now, and we will be in a similar position to that of our collaborators. For these reasons, the following principle sets the theme throughout the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FilippoBovo/production-data-science\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Production Data Science\"), \" workflow: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"make life easier for other people and your future-self\"), \".\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"Easing other people's lives and the explore-refactor cycle are the essence of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FilippoBovo/production-data-science\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Production Data Science\"), \" workflow. In this workflow, we start by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FilippoBovo/production-data-science/tree/master/tutorial/a-setup\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"setting up a project\"), \" with a structure that emphasises collaboration and harmonises exploration with production. With this structure, we move into the first phase of the explore-refactor cycle: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FilippoBovo/production-data-science/tree/master/tutorial/c-explore\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"exploration\"), \". Here, we use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jupyter.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Jupyter notebook\"), \" to analyse the data, form hypotheses, test them, and use the acquired knowledge to build predictive models. Once we finish an analysis, we \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FilippoBovo/production-data-science/tree/master/tutorial/d-refactor\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"refactor\"), \" the main parts of the notebook guided by the text-over-code rule. The code flows from the notebook to the production codebase and the line of reasoning becomes the protagonist of the notebook. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FilippoBovo/production-data-science/tree/master/tutorial/e-iterate_to_product\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Exploration and refactoring are then iterated\"), \" until we reach the end-product.\"), mdx(\"hr\", {\n    \"className\": \"my-4\"\n  }), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"Explore the Production Data Science workflow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FilippoBovo/production-data-science\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"here\"), \".\"), mdx(\"p\", {\n    \"className\": \"mb-3\"\n  }, \"This article was originally published in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://towardsdatascience.com/production-data-science-3a42dee5208\",\n    \"target\": \"_blank\",\n    \"rel\": \"noopener noreferrer\"\n  }, \"Towards Data Science (Medium)\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Production Data Science","date":"2018-07-18","dateFormatted":"July 18th, 2018","description":"A workflow for collaborative data science aimed at production.","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/970d763f58abd8aed1171eb9719309a4/859a1/explore-refactor-loop.png","srcSet":"/static/970d763f58abd8aed1171eb9719309a4/e7dcc/explore-refactor-loop.png 750w,\n/static/970d763f58abd8aed1171eb9719309a4/106c1/explore-refactor-loop.png 1500w,\n/static/970d763f58abd8aed1171eb9719309a4/859a1/explore-refactor-loop.png 3000w","sizes":"(min-width: 3000px) 3000px, 100vw"},"sources":[{"srcSet":"/static/970d763f58abd8aed1171eb9719309a4/ee7ce/explore-refactor-loop.webp 750w,\n/static/970d763f58abd8aed1171eb9719309a4/1ff2c/explore-refactor-loop.webp 1500w,\n/static/970d763f58abd8aed1171eb9719309a4/002b2/explore-refactor-loop.webp 3000w","type":"image/webp","sizes":"(min-width: 3000px) 3000px, 100vw"}]},"width":3000,"height":1500}}},"coverShare":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/970d763f58abd8aed1171eb9719309a4/a6312/explore-refactor-loop.png","srcSet":"/static/970d763f58abd8aed1171eb9719309a4/e20c6/explore-refactor-loop.png 300w,\n/static/970d763f58abd8aed1171eb9719309a4/62ea7/explore-refactor-loop.png 600w,\n/static/970d763f58abd8aed1171eb9719309a4/a6312/explore-refactor-loop.png 1200w,\n/static/970d763f58abd8aed1171eb9719309a4/0aec7/explore-refactor-loop.png 2400w","sizes":"(min-width: 1200px) 1200px, 100vw"},"sources":[{"srcSet":"/static/970d763f58abd8aed1171eb9719309a4/b979a/explore-refactor-loop.webp 300w,\n/static/970d763f58abd8aed1171eb9719309a4/2fa07/explore-refactor-loop.webp 600w,\n/static/970d763f58abd8aed1171eb9719309a4/f9756/explore-refactor-loop.webp 1200w,\n/static/970d763f58abd8aed1171eb9719309a4/e9ceb/explore-refactor-loop.webp 2400w","type":"image/webp","sizes":"(min-width: 1200px) 1200px, 100vw"}]},"width":1200,"height":600}}},"coverAlt":"Explore-refactor loop"}}},"pageContext":{"id":"bc3eb479-a9d1-57a8-8b4d-efc04cd2921e"}},
    "staticQueryHashes": ["3868140423"]}